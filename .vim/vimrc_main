" Vimrc Main

" General Options
syntax on
set bg=dark
set autoindent
set nofoldenable

" Parameters
set number
set softtabstop=2
set shiftwidth=2
set expandtab
set pastetoggle=<F12>
set splitright
set backupdir=/tmp

" Shift fix
command! W write
command! Q quit

" Highlighting
set hlsearch
set incsearch
nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>
"hi Comment cterm=none ctermfg=6 ctermbg=none
"hi Directory ctermfg=6
"hi NonText ctermfg=0

" Confuse the Colons
"nnoremap ; :
"nnoremap : ;

" Shortcuts
nmap <leader>d :NERDTreeToggle<cr>
nmap <leader>R :!clear && rake<cr><cr>
nmap <leader>r :!clear && ruby %<cr><cr>
nmap <leader>n :!clear && node %<cr>
nmap <leader>c :echo system("wc -w ".expand("%"))<cr>
nmap <leader>w :Goyo<cr>
nmap <leader>e :vsp! ~/.vim/vimrc_main<cr>
nmap <leader>s :execute 'vsp! ~/.vim/bundle/snipmate.vim/snippets/' . &filetype . '.snippets'<cr>
nmap <leader>g :
nmap <leader>p :!textplay -p %<cr>
nmap <leader>f gqq
nmap <leader>z :!source ~/.bash_profile && gz %<cr>
" nmap <leader>x yitvatp
nmap <leader>x ::w<CR>:!clear && iex %<cr>
nmap <leader>- :r! date<cr>
nmap <leader><cr> :!./bin.sh<cr><cr>
" This doesn't work. Why?
" nmap <leader>m :!uglifyjs % | gzip -c | wc -c<cr>
map <leader>/ :NERDCommenterToggle<cr>
nmap <leader><space> :R<cr>

vmap <leader>< :s/</\&lt;/g \| :'<,'>s/>/\&gt;/g<cr><cr>

" Force Reload .vimrc on edit
autocmd! bufwritepost .vimrc source ~/.vimrc
autocmd! bufwritepost vimrc_main source ~/.vimrc
autocmd! bufwritepost *.snippets call ReloadAllSnippets()

inoremap <Left>   <NOP>
inoremap <Right>  <NOP>
inoremap <Up>     <NOP>
inoremap <Down>   <NOP>

" Shortcut Escape
inoremap jj       <Esc>

" Color Scheme
colorscheme synic

let NERDTreeQuitOnOpen=1
let g:jsx_ext_required = 0
set backspace=2 " make backspace work like most other apps

" IDIOMS TO START USING
" :w !sudo tee %      # Save the file with sudo mode

" File-specific settings
autocmd BufRead,BufNewFile *.txt set nonumber
au BufRead,BufNewFile *.fountain    set filetype=fountain
au BufRead,BufNewFile Guardfile     set filetype=ruby
au BufRead,BufNewFile Gruntfile     set filetype=javascript
au BufRead,BufNewFile Gemfile       set filetype=ruby
au BufRead,BufNewFile config.ru     set filetype=ruby
au BufRead,BufNewFile *.ad          set filetype=asciidoc
au BufRead,BufNewFile *.conf        set filetype=apache
au BufRead,BufNewFile *.es6         set filetype=javascript
au BufRead,BufNewFile *.sls         set filetype=yaml
au BufRead,BufNewFile vundle        set filetype=vim
au BufRead,BufNewFile dotfiles      set filetype=vim
au BufRead,BufNewFile symlinks      set filetype=vim
au BufRead,BufNewFile *.md      set filetype=markdown

let g:limelight_conceal_ctermfg = 'lightgray'

function! s:goyo_enter()
  Limelight
  colorscheme Tomorrow
  highlight NonText ctermfg=bg guifg=bg
  set wrap linebreak nolist
endfunction

function! s:goyo_leave()
  Limelight!
  colorscheme synic
  highlight NonText ctermfg=fg guifg=fg
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

autocmd FileType make set noexpandtab shiftwidth=8 softtabstop=0

" let g:jsx_ext_required = 0

" let NERDTreeShowHidden=1

" Remove whitespace
function! StripTrailingWhitespace()
  let save_cursor = getpos(".")
  %s/\s\+$//e
  call setpos('.', save_cursor)
endfunction

autocmd BufWritePre * call StripTrailingWhitespace()

function! WrapForTmux(s)
  if !exists('$TMUX')
    return a:s
  endif

  let tmux_start = "\<Esc>Ptmux;"
  let tmux_end = "\<Esc>\\"

  return tmux_start . substitute(a:s, "\<Esc>", "\<Esc>\<Esc>", 'g') . tmux_end
endfunction

let &t_SI .= WrapForTmux("\<Esc>[?2004h")
let &t_EI .= WrapForTmux("\<Esc>[?2004l")

function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()
